<?xml version="1.0" encoding="UTF-8" ?>
<root>
    <group title="Page测试">
        <!--
            子页面解析、执行顺序：

            1. 分页功能加载前：[before-read] / [before-load]
            2. 解析配置内容：[config-sh] / [config]
            3. 配置解析完后：[after-read] / [after-load]

            4. 页面加载【成功】：[load-ok] / [load-success]
            4. 页面加载【失败】：[load-fail] / [after-error]
        -->
        <page after-read="sleep 2" before-read="sleep 5"
            config="kt/kernel_tuner.xml">
            <title>page功能测试</title>
            <desc>来试试page的新功能</desc>
        </page>

        <!--直接输出配置文件所在的绝对路径-->
        <page after-read="sleep 1" before-read="sleep 1" config-sh="echo '/sdcard/text.xml'">
            <title>测试config-sh【路径输出】</title>
            <desc>通过config-sh输出配置页所在位置</desc>
        </page>

        <!--直接输出配置文件内容，当识别到 内容以“<?xml”开头且以“>”结尾，自动作为xml配置内容解析-->
        <page after-read="sleep 1" before-read="sleep 1" config-sh="cat /sdcard/text.xml">
            <title>测试config-sh【全文输出】</title>
            <desc>通过config-sh输出配置页内容</desc>
        </page>
    </group>

    <group title="activity、link、html">
        <!--支持指定activity-->
        <page id="dev" activity="com.android.settings.APPLICATION_DEVELOPMENT_SETTINGS">
            <title>开发者选项</title>
        </page>

        <!--支持指定网页地址-->
        <page link="https://www.baidu.com/">
            <title>打开百度</title>
            <desc>使用系统浏览器打开</desc>
        </page>

        <!--支持指定网页地址(用PIO自带的浏览器打开)-->
        <page html="https://www.baidu.com/">
            <title>打开百度</title>
            <desc>使用内置浏览器打开，网页将可以调用WebAPI执行脚本，请不要轻易打开不受信任的界面！</desc>
        </page>
    </group>

    <group title="页面菜单">
        <page config="empty.xml">
            <title>在页面右上角显示菜单</title>
            <option type="default" id="a" auto-off="true">自定义 1</option>
            <option type="default" id="b">自定义 2</option>
            <option type="refresh">刷新界面</option>
            <option type="finish">关闭页面</option>
            <option type="file">选择文件</option>
            <handler>
                echo '此脚本的作用是处理菜单点击事件'
                echo '执行时PIO会告诉你哪个菜单项被点击，就像Picker的 set 一样'
                echo ''
                echo '点击的菜单项' $menu_id
                echo ''
                echo '选择的文件' $file
                echo ''
            </handler>
        </page>

        <!--
            相较于右上角菜单，悬浮菜单主要是额外增加了
            type=fab 属性，其它属性的用法基本一致
            但是你不能在一个页面上定义多个悬浮按钮
        -->
        <page config="empty.xml">
            <title>在页面显示悬浮按钮</title>
            <option type="file" style="fab">选择文件</option>
            <handler>
                echo '此脚本的作用是处理菜单点击事件'
                echo '执行时PIO会告诉你哪个菜单项被点击，就像Picker的 set 一样'
                echo ''
                echo '点击的菜单项' $menu_id
                echo ''
                echo '选择的文件' $file
                echo ''
            </handler>
        </page>

        <!--不管是右上角菜单还是悬浮按钮，选择文件时都可以限制类型-->
        <page config="empty.xml">
            <title>选择指定类型的文件</title>
            <option type="file" style="fab" suffix="zip">选择文件</option>
            <handler>
                echo '选择的文件' $file
                echo ''
            </handler>
        </page>

        <!--你可以自己配置悬浮按钮图标-->
        <page config="empty.xml">
            <title>自定义悬浮按钮的图标</title>
            <option style="fab" icon="samples/icons/icon-test.png">测试按钮图标</option>
            <handler>
                echo 'emmm'
            </handler>
        </page>
    </group>

    <group title="隐藏功能">
        <page activity="com.miui.voiceassist/com.xiaomi.voiceassistant.AiSettings.AiShortcutActivity">
            <title>打开小爱捷径</title>
            <desc>当activity设置为未导出的活动，启动失败后会自动尝试用am start-activity命令以root权限重试</desc>
        </page>
        <page activity="am start-activity com.android.settings/com.android.settings.Settings\$HighPowerApplicationsActivity">
            <title>打开电池优化界面</title>
            <desc>甚至，你可以直接在activity属性里使用am命令，PIO解析到activity的内容为“am ”开头时自动调用shell执行</desc>
        </page>
    </group>
</root>